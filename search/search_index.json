{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"stubb","text":"<p>Stubb is a library for creating and evaluating structured outputs from language models.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install this library using <code>pip</code>: <pre><code>pip install stubb\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":"<p>Usage instructions go here.</p>"},{"location":"#other-libraries","title":"Other Libraries","text":"<p>Stubb is similar in spirit to several other libraries, including:</p> <ul> <li>instructor</li> <li>guardrails</li> <li>outlines</li> </ul> <p>It is different in the following ways:</p> <p>Instructor uses the OpenAI API, and uses the function calling to generate json. Stubb is similar, but uses constrained decoding via a grammar to generate json, which is compatible with many open source language models.</p> <p>Guardrails uses a custom xml specification, (<code>.rail</code>), as well as Pydantic models to generate json. Stubb is similar, but has a much simpler API and tries to do \"less things\". Both Instructor and Guardrails support re-running model APIs based on complex post-validation (i.e not purely a schema). Stubb does not do this.</p> <p>Outlines takes a similar approach to to Stubb to generate valid Pydantic models, but it uses regex parsing to do constrained decoding. This is written in Python and accelerated, during sampling, with Numba. In constrast, Stubb uses a GBNF grammar, which is supported in C++ directly via the llama.cpp project.</p> <p>Stubb is designed to be simple to use, and not to do \"too much for you\". It uses validated technologies like Pydantic, FastAPI, Sqlite, and is modular - you can use the components you want, and not the ones you don't.</p>"},{"location":"#development","title":"Development","text":"<p>To contribute to this library, first checkout the code. Then create a new virtual environment: <pre><code>cd stubb\npython -m venv venv\nsource venv/bin/activate\n</code></pre> Now install the dependencies and test dependencies: <pre><code>pip install -e '.[test]'\n</code></pre> To run the tests: <pre><code>pytest\n</code></pre></p>"},{"location":"#watch-for-ollama-to-merge-one-of-these-prs","title":"Watch for Ollama to merge one of these PRs.","text":"<p>https://github.com/ollama/ollama/pulls?q=is%3Apr+is%3Aopen+grammar</p>"}]}